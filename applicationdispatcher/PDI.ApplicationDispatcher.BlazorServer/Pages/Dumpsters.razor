@page "/dumpsters"
@page "/dumpsters/{id}"
@inject DialogService DialogService
@inject IController controller
@inject IModel model
@inject NavigationManager NaviManager;

<h1>Śmietniki</h1>

<div class="d-flex justify-content-between align-items-center mb-2">
    @if (id != null)
    {
        <p class="mb-0">Wszystkie śmietniki przypisane do trasy: @id.</p>
    }
    else
    {
        <p class="mb-0">Wszystkie śmietniki przypisane do zakładu.</p>
    }
    <RadzenButton Click=@AddDumpster Icon="add" Text="DODAJ ŚMIETNIK"
                  Style="color: white; width: 30%; font-size: 15px; background-color:rgb(60, 139, 55);" />
</div>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" FilterText="" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@dumpsters" TItem="DumpsterData" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And" EmptyText="Brak danych."
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <RadzenDataGridColumn TItem="DumpsterData" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="30px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="DumpsterData" Property="State" Filterable="true" Title="STAN" Width="50px" TextAlign="TextAlign.Center" FilterValue="@currentState">
            <FilterTemplate>
                <RadzenDropDown @bind-Value="@currentState"
                                TextProperty="Text"
                                AllowClear="true"
                                ValueProperty="Value"
                                Style="width: 100%; height: 35px; margin-bottom: 0.5rem;"
                                Data="@(Enum.GetValues(typeof(DumpsterState)).Cast<DumpsterState?>().Select(t => new { Text = $"{t.GetDisplayDescription()}", Value = t }))" />
            </FilterTemplate>
            <Template Context="data">
                <div class="d-flex justify-content-between px-2">
                    @if (data.State == DumpsterState.enabled)
                    {
                        <RadzenIcon Icon="play_arrow" Style="color:green" />
                        <span class="align-content-center" style="width: 100px;">@data.State.GetDisplayDescription()</span>
                    }
                    else if (data.State == DumpsterState.disabled || data.State == DumpsterState.fault)
                    {
                        <RadzenIcon Icon="stop" Style="color:red" />
                        <span class="align-content-center" style="width: 100px;">@data.State.GetDisplayDescription()</span>
                    }
                    else
                    {
                        <RadzenIcon Icon="forward" Style="color:darkgreen" />
                        <span class="align-content-center" style="width: 100px;">@data.State.GetDisplayDescription()</span>
                    }
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DumpsterData" Property="Capacity" Filterable="true" Title="POJEMNOŚĆ [l]" Width="50px" TextAlign="TextAlign.Center" FilterValue="@currentCapacity">
            <FilterTemplate>
                <RadzenNumeric TValue="int?" Step="10" Change=@(args => OnChange("capacity", args))
                               Style="width: 100%; height: 35px; margin-bottom: 0.5rem;" />
            </FilterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DumpsterData" Property="Usage" Filterable="true" Title="ZAPEŁNIENIE [%]" Width="50px" TextAlign="TextAlign.Center" FilterValue="@currentUsage">
            <FilterTemplate>
                <RadzenNumeric TValue="int?" Step="10" Change=@(args => OnChange("usage", args))
                               Style="width: 100%; height: 35px; margin-bottom: 0.5rem;" />
            </FilterTemplate>
            <Template Context="data">
                @if (data.Usage <= 50)
                {
                    <span style="color: green; font-weight: 800">@data.Usage</span>
                }
                else if (data.Usage <= 80)
                {
                    <span style="color: rgb(135, 131, 19); font-weight: 800">@data.Usage</span>
                }
                else
                {
                    <span style="color: rgb(181, 21, 10); font-weight: 800">@data.Usage</span>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DumpsterData" Property="Location" Filterable="false" Sortable="false" Title="LOKALIZACJA" Width="50px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <div class="">
                    <RadzenButton Icon="pin_drop" Style="color:green; background: #00000000" Click="@(args => DumpsterLocation(data.Id))"/>
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DumpsterData" Property="" Filterable="false" Sortable="false" Title="POMIARY" Width="50px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <div class="">
                    <RadzenButton Icon="bar_chart" Style="color:green; background: #00000000" Click="@(args => DumpsterMeasurements(data.Id))" />
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DumpsterData" Property="State" Filterable="false" Sortable="false" Title="AKCJE" Width="100px" TextAlign="TextAlign.Center">
            <Template Context="data">
                @if (data.State != DumpsterState.assigned)
                {
                    <div class="d-flex justify-content-between">
                        <RadzenButton Click=@(args => OnClick("edit", data)) Icon="edit" Text="EDYTUJ"
                                  Style="color: white; width: 49%; font-size: 13px; background-color:rgb(135, 131, 19); display: flex; justify-content: center; column-gap: 5px;" />
                        <RadzenButton Click=@(args => OnClick("delete", data)) Icon="clear" Text="USUŃ"
                                  Style="color: white; width: 49%; font-size: 13px; background-color:rgb(181, 21, 10); display: flex; justify-content: center; column-gap: 5px;" />
                    </div>
                }

            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public string id { get; set; }
    IEnumerable<DumpsterData> dumpsters;
    DumpsterState? currentState;
    int? currentCapacity;
    int? currentUsage;

    protected override async Task OnInitializedAsync()
    {
        await controller.SearchDumpstersAsync();
        if(id != null)
        {
            var list = model.RoutesList.Find(s => s.Id == id).DumpstersIds;
            dumpsters = model.DumpstersList.Where(d => list.Contains(d.Id)).ToList();
        }
        else
        {
            dumpsters = model.DumpstersList;
        }

    }

    async void OnClick(string buttonName, DumpsterData data)
    {
        if (buttonName == "edit")
        {
            await this.EditDumpster(data);
        }
        else if (buttonName == "delete")
        {
            await this.DeleteDumpster(data.Id);
        }
    }

    async void OnChange(string filter, dynamic value)
    {
        if (filter == "capacity")
        {
            currentCapacity = value;
        }
        else if (filter == "usage")
        {
            currentUsage = value;
        }

    }

    private async Task AddDumpster()
    {
        var dialogParams = new Dictionary<string, object>
        {
            {"edit", false}
        };
        await DialogService.OpenAsync<DumpsterDialog>("Dodaj śmietnik", dialogParams, new DialogOptions() { CloseDialogOnOverlayClick = true, Resizable = true, Draggable = true, Width = "600px", });
        await controller.SearchDumpstersAsync();
    }

    private async Task EditDumpster(DumpsterData data)
    {
        var dialogParams = new Dictionary<string, object>
        {
            {"edit", true},
            {"dumpster", data}
        };
        await DialogService.OpenAsync<DumpsterDialog>("Edytuj śmietnik", dialogParams, new DialogOptions() { CloseDialogOnOverlayClick = true, Resizable = true, Draggable = true, Width = "600px", });
        await controller.SearchDumpstersAsync();
    }

    private async Task DeleteDumpster(string id)
    {
        string response = await controller.DeleteDumpsterAsync(id);
        await controller.SearchDumpstersAsync();
        //komunikaty
        //refresh
    }

    private async Task DumpsterLocation(string id)
    {
        NaviManager.NavigateTo("/map/" + id);
    }

    private async Task DumpsterMeasurements(string id)
    {
        NaviManager.NavigateTo("/data/" + id);
    }
}